from collections import defaultdict

class BalancedRanking(list):
    '''
    A list of document IDs generated by an interleaving method
    including two rankers A and B
    '''
    __slots__ = ['a', 'b']
    def __hash__(self):
        return hash((tuple(self), tuple(self.a), tuple(self.b)))

class CreditRanking(list):
    '''
    A list of document IDs generated by an interleaving method
    including credits
    '''
    __slots__ = ['credits']
    def __init__(self, lists):
        '''
        Initialize self.credits

        lists: lists of document IDs
        '''
        self.credits = {}
        for i in range(len(lists)):
            self.credits[i] = defaultdict(float)

    def __hash__(self):
        l = []
        for k, v in self.credits.items():
            ll = []
            for kk, vv in v.items():
                ll.append((kk, vv))
            l.append((k, frozenset(ll)))
        return hash((tuple(self), frozenset(l)))

class TeamRanking(list):
    '''
    A list of document IDs generated by an interleaving method,
    including teams
    '''
    __slots__ = ['teams']
    def __init__(self, team_indices):
        '''
        Initialize self.teams

        team_indices: indices for self.teams
        '''
        self.teams = {i: set() for i in team_indices}

    def __hash__(self):
        '''
        TeamRanking can be a key by which
        rankings with the same document ID list
        and the same team assignment are the same
        '''
        l = []
        for k, v in self.teams.items():
            l.append((k, frozenset(v)))
        return hash((tuple(self), frozenset(l)))
