from .ranking import Ranking
from .interleaving_method import InterleavingMethod
import numpy as np
from collections import defaultdict

class TeamDraft(InterleavingMethod):
    '''
    Team Draft Interleaving
    '''
    def interleave(self, a, b):
        '''
        a: a list of document IDs
        b: a list of document IDs

        Return an instance of Ranking
        '''
        result = Ranking()
        team_a = []
        team_b = []
        while len(set(a) - set(result)) > 0 and len(set(b) - set(result)) > 0:
            is_a_first = np.random.randint(0, 2) == 0
            if len(team_a) < len(team_b) or\
                (len(team_a) == len(team_b) and is_a_first):
                k = [i for i, x in enumerate(a) if not x in result][0]
                result.append(a[k])
                team_a.append(a[k])
            else:
                k = [i for i, x in enumerate(b) if not x in result][0]
                result.append(b[k])
                team_b.append(b[k])
        result.team_a = team_a
        result.team_b = team_b
        return result

    def multileave(self, *lists):
        '''performs multileaving...

        *lists: lists of document IDs

        Returns an instance of Ranking
        '''
        k = min(map(lambda l: len(l), lists))
        result = Ranking()
        teams = {}
        for i in range(len(lists)):
            teams[i] = set()
        empty_teams = set()

        while len(result) < k:
            selected_team = self._select_team(teams, empty_teams)
            docs = [x for x in lists[selected_team] if not x in result]
            if len(docs) > 0:
                selected_doc = docs[0]
                result.append(selected_doc)
                teams[selected_team].add(selected_doc)
            else:
                empty_teams.add(selected_team)

        result.teams = teams
        return result

    def _select_team(self, teams, empty_teams):
        team_lens = [len(teams[i]) for i in teams if not i in empty_teams]
        if len(team_lens) == 0:
            return None
        min_team_num = min(team_lens)
        available_teams = [i for i in teams
            if len(teams[i]) == min_team_num and not i in empty_teams]
        if len(available_teams) == 0:
            return None
        selected_team = np.random.choice(available_teams)
        return selected_team

    def evaluate(self, ranking, clicks):
        '''
        ranking: an instance of Ranking generated by Balanced.interleave
        clicks: a list of indices clicked by a user

        Return one of the following tuples:
        - (1, 0): Ranking 'a' won
        - (0, 1): Ranking 'b' won
        - (0, 0): Tie
        '''
        if len(clicks) == 0:
            return (0, 0)
        h_a = len([c for c in clicks if ranking[c] in ranking.team_a])
        h_b = len([c for c in clicks if ranking[c] in ranking.team_b])
        if h_a > h_b:
            return (1, 0)
        elif h_b > h_a:
            return (0, 1)
        else:
            return (0, 0)
